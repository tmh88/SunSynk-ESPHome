# Substitutions
substitutions:
# Device Names
  device_name: "sunsynk"
  friendly_name: "SunSynk"
  device_description: "Sunsynk RS485 Logger"
  settings_skipped_updates: "4"

# Icon
  main_icon: "solar-power"
  
# Basic Config
esphome:
  name: "${device_name}"
  comment: '${device_description}'

esp32:
  board: lolin32_lite
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key
 
# OTA Updates Password 
ota:
  password: !secret sunsynk_ota_password

# Enable Webserver
web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password
  ota: true

# Wifi Setup
wifi:
  ssid: !secret Wifi_SSID
  password: !secret Wifi_Password

 # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Hotspot"
    password: !secret Fallback_Wifi_Password

  fast_connect: true
  power_save_mode: none

# Enable captive portal on fallback wifi 
captive_portal:

# Enable time component to reset energy at midnight
# https://esphome.io/components/time.html#home-assistant-time-source
time:
  - platform: homeassistant
    id: homeassistant_time
     
uart:
  id: mod_bus
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 9600
  stop_bits: 1
 
modbus:
  id: sunsynk_modbus
 
modbus_controller:
  - id: sunsynk
    address: 0x01
    modbus_id: sunsynk_modbus
    setup_priority: -10
    update_interval: "5s"
    command_throttle: "50ms"


############################################### BINARY SENSORS ###############################################

binary_sensor:           
  - platform: modbus_controller            # 194 Grid Connected Status
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Connected Status"
    id: sunsynk_grid_connected_status
    register_type: holding
    address: 194

  - platform: modbus_controller           # 280 Grid Peak Shaving Status
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Peak Shaving Status"
    id: sunsynk_grid_peak_shaving_status
    register_type: holding
    address: 280
    bitmask: 0x100

############################################### SENSORS ###############################################
sensor:

##########
# General
##########

  - platform: wifi_signal                  # WiFi Signal Sensor
    name: "${friendly_name} WiFi Status"
    update_interval: 60s
    entity_category: diagnostic

  - platform: modbus_controller            # 013 Firmware Control Board
    modbus_controller_id: sunsynk
    name: "${friendly_name} Firmware Control Board"
    id: sunsynk_firmware_control_board
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 13
    entity_category: diagnostic

  - platform: modbus_controller            # 014 Firmware Comms Board
    modbus_controller_id: sunsynk
    name: "${friendly_name} Firmware Comms Board"
    id: sunsynk_firmware_comms_board
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 14
    entity_category: diagnostic

  - platform: modbus_controller            # 090 DC Transformer Temperature
    modbus_controller_id: sunsynk
    name: "${friendly_name} DC Transformer Temperature"
    id: sunsynk_dctransformer_temperature
    register_type: holding
    address: 090
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: S_WORD
    filters:
      - offset: -1000
      - multiply:  0.1

  - platform: modbus_controller            # 091 DC Heatsink Temperature
    modbus_controller_id: sunsynk
    name: "${friendly_name} DC Heatsink Temperature"
    id: sunsynk_heatsink_temperature
    register_type: holding
    address: 091
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: S_WORD
    filters:
      - offset: -1000
      - multiply:  0.1

##########
# Battery
##########
  - platform: modbus_controller            # 182 Battery Temperature
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Temperature"
    id: sunsynk_battery_temperature
    register_type: holding
    address: 182
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: U_WORD 
    filters:
      - offset: -1000
      - multiply: 0.1

  - platform: modbus_controller            # 183 Battery Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Voltage"
    id: sunsynk_battery_voltage
    register_type: holding
    address: 183
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    filters:
      - multiply: 0.01
    value_type: U_WORD

  - platform: modbus_controller            # 184 Battery SOC
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery SOC"
    id: sunsynk_battery_soc
    register_type: holding
    address: 184
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    value_type: U_WORD

  - platform: modbus_controller            # 190 Battery Output Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Output Power"
    id: sunsynk_battery_output_power
    register_type: holding
    address: 190
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    value_type: S_WORD

  - platform: modbus_controller            # 191 Battery Output Current
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Output Current"
    id: sunsynk_battery_output_current
    register_type: holding
    address: 191
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 217 Battery Capacity Shutdown
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Capacity Shutdown"
    id: sunsynk_battery_capacity_shutdown
    register_type: holding
    address: 217
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery

###########
# Inverter
###########
  - platform: modbus_controller            # 175 Inverter Output Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Inverter Output Power"
    id: sunsynk_inverter_output_power
    register_type: holding
    address: 175
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    value_type: S_WORD

  - platform: modbus_controller            # 154 Inverter Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} Inverter Voltage"
    id: sunsynk_inverter_voltage
    register_type: holding
    address: 154
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 164 Inverter Output Current
    modbus_controller_id: sunsynk
    name: "${friendly_name} Inverter Output Current"
    id: sunsynk_inverter_output_current
    register_type: holding
    address: 164
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 193 Grid Frequency
    modbus_controller_id: sunsynk
    name: "${friendly_name} Inverter Frequency"
    id: sunsynk_inverter_frequency
    register_type: holding
    address: 193
    unit_of_measurement: "Hz"
    accuracy_decimals: 2
    state_class: measurement   
    value_type: U_WORD    
    filters:
      - multiply: 0.01

#######
# Grid
#######
  - platform: modbus_controller            # 079 Grid Frequency
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Frequency"
    id: sunsynk_grid_frequency
    register_type: holding
    address: 79
    unit_of_measurement: "Hz"
    accuracy_decimals: 2
    state_class: measurement   
    value_type: U_WORD    
    filters:
      - multiply: 0.01

  - platform: modbus_controller             # 169 Grid Power = L1(167) + L2(168)
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Power"
    id: sunsynk_grid_power
    register_type: holding
    address: 169
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller             # 167 Grid LD Power = L1 seems to be LD
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid LD Power"
    id: sunsynk_grid_ld_power
    register_type: holding
    address: 167
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller             # 168 Grid L2 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid L2 Power"
    id: sunsynk_grid_l2_power
    register_type: holding
    address: 168
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 150 Grid Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Voltage"
    id: sunsynk_grid_voltage
    register_type: holding
    address: 150
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            #160 and 161 Grid Current signed 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Current"
    id: sunsynk_grid_current
    register_type: holding
    address: 160
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
     - multiply: 0.01

  - platform: modbus_controller            # 172 Grid CT Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid CT Power"
    id: sunsynk_grid_ct_power
    register_type: holding
    address: 172
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

#######
# Load
#######
  - platform: modbus_controller            # 178 Load Power = L1(176) + L2(177)
    modbus_controller_id: sunsynk
    name: "${friendly_name} Load Power"
    id: sunsynk_load_power
    register_type: holding
    address: 178
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 176 Load L1 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Load L1 Power"
    id: sunsynk_load_l1_power
    register_type: holding
    address: 176
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 177 Load L2 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Load L2 Power"
    id: sunsynk_load_l2_power
    register_type: holding
    address: 177
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 192 Load Frequency
    modbus_controller_id: sunsynk
    name: "${friendly_name} Load Frequency"
    id: sunsynk_load_frequency
    register_type: holding
    address: 192
    unit_of_measurement: "Hz"
    accuracy_decimals: 2
    state_class: measurement    
    value_type: U_WORD    
    filters:
      - multiply: 0.01

#############
# Solar PV
#############
  - platform: modbus_controller            # 186 PV1 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} PV1 Power"
    id: sunsynk_pv1_power
    register_type: holding
    address: 186
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: U_WORD

  - platform: modbus_controller            # 109 PV1 Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} PV1 Voltage"
    id: sunsynk_pv1_voltage
    register_type: holding
    address: 109
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 110 PV1 Output Current
    modbus_controller_id: sunsynk
    name: "${friendly_name} PV1 Current"
    id: sunsynk_pv1_current
    register_type: holding
    address: 110
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1
   
  - platform: modbus_controller            # 187 PV2 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} PV2 Power"
    id: sunsynk_pv2_power
    register_type: holding
    address: 187
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: U_WORD

  - platform: modbus_controller            # 111 PV2 Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} PV2 Voltage"
    id: sunsynk_pv2_voltage
    register_type: holding
    address: 111
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 112 PV2 Output Current
    modbus_controller_id: sunsynk
    name: "${friendly_name} PV2 Current"
    id: sunsynk_pv2_current
    register_type: holding
    address: 112
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1


  - platform: template                   # Sum of PV1 and PV2 to get total PV Power
    name: "${friendly_name} Total Solar"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_pv1_power).state + id(sunsynk_pv2_power).state);
    update_interval: 2s


###################
# Power on Outputs
###################
  - platform: modbus_controller            # 166 Aux Output Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Aux Output Power"
    id: sunsynk_aux_output_power
    register_type: holding
    address: 166
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: template                     # Essential Power based on register 175 + 169 - 166
    name: "${friendly_name} Essential Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_inverter_output_power).state + id(sunsynk_grid_power).state - id(sunsynk_aux_output_power).state);
    update_interval: 2s

  - platform: template                     # UPS Power (Essential 1 Power) based on register 175 + 167 - 166
    name: "${friendly_name} UPS Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_inverter_output_power).state + id(sunsynk_grid_ld_power).state - id(sunsynk_aux_output_power).state);
    update_interval: 2s

  - platform: template                     # Essential 2 Power based on register 175 + 169 - 166
    name: "${friendly_name} Essential 2 Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_inverter_output_power).state + id(sunsynk_grid_power).state - id(sunsynk_aux_output_power).state);
    update_interval: 2s

  - platform: template                     # Nonessential Power(House Load) 172 - 167
    name: "${friendly_name} House Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_grid_ct_power).state - id(sunsynk_grid_ld_power).state);
    update_interval: 2s

  - platform: template                     # Nonessential Power 175 - 167
    name: "${friendly_name} Non-Essential Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_inverter_output_power).state - id(sunsynk_grid_ld_power).state);
    update_interval: 2s

#########
# Energy
#########
  - platform: modbus_controller            # 070 Daily Battery Charge
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Battery Charge"
    id: sunsynk_battery_charge_day
    register_type: holding
    address: 70
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 071 Daily Battery Discharge
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Battery Discharge"
    id: sunsynk_battery_discharge_day
    register_type: holding
    address: 71
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 076 Daily Grid Import
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Grid Import"
    id: sunsynk_grid_import_day
    register_type: holding
    address: 76
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 077 Daily Grid Export
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Grid Export"
    id: sunsynk_grid_export_day
    register_type: holding
    address: 77
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 084 Daily Load
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Load Power (kWh)"
    id: sunsynk_daily_load_power_kwh
    register_type: holding
    address: 84
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 108 Daily PV Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily PV Power (kWh)"
    id: sunsynk_daily_pv_power_kwh
    register_type: holding
    address: 108
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            #72 and 73 Total Battery Charge unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Battery Charge (kWh)"
    id: sunsynk_total_battery_charge_kwh
    register_type: holding
    address: 72
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
     - multiply: 0.1

  - platform: modbus_controller            #74 and 75 Total Battery Discharge unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Battery Discharge (kWh)"
    id: sunsynk_total_battery_discharge_kwh
    register_type: holding
    address: 74
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
     - multiply: 0.1

  - platform: modbus_controller            # 78 and 80 Total Grid Import unsigned 32 bit integer from 2 registers low word first????? Using 78 only an unsure how to use 2 diffrent registers!
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Grid Import (kWh)"
    id: sunsynk_total_grid_import_kwh
    register_type: holding
    address: 78
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 81 and 82 Total Grid Export unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Grid Export (kWh)"
    id: sunsynk_total_grid_export_kwh
    register_type: holding
    address: 81
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 85 and 86 Load Power Total unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Load Power (kWh)"
    id: sunsynk_total_load_power_kwh
    register_type: holding
    address: 85
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 96 and 97 Total PV Power unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total PV Power (kWh)"
    id: sunsynk_total_pv_power_kwh
    register_type: holding
    address: 96
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R    
    filters:
      - multiply: 0.1


################################################ READ SETTINGS ################################################

  - platform: modbus_controller          # 250 Settings Timezone1
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Timezone1"
    id: sunsynk_setting_timezone1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 250
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 251 Settings Timezone2
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Timezone2"
    id: sunsynk_setting_timezone2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 251   
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 252 Settings Timezone3
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Timezone3"
    id: sunsynk_setting_timezone3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 252
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 253 Settings Timezone4
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Timezone4"
    id: sunsynk_setting_timezone4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 253
    icon: "mdi:clock"

  - platform: modbus_controller          # 254 Settings Timezone5
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Timezone5"
    id: sunsynk_setting_timezone5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 254
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 255 Settings Timezone6
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Timezone6"
    id: sunsynk_setting_timezone6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 255
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 268 Settings SoC Timezone1
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone1"
    id: sunsynk_setting_soc_timezone1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 268
    unit_of_measurement: "%"
    value_type: U_WORD
    icon: "mdi:battery-clock-outline"

  - platform: modbus_controller          # 269 Settings SoC Timezone2
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone2"
    id: sunsynk_setting_soc_timezone2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 269
    unit_of_measurement: "%"
    value_type: U_WORD
    icon: "mdi:battery-clock-outline"

  - platform: modbus_controller          # 270 Settings SoC Timezone3
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone3"
    id: sunsynk_setting_soc_timezone3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 270
    unit_of_measurement: "%"
    value_type: U_WORD
    icon: "mdi:battery-clock-outline"

  - platform: modbus_controller          # 271 Settings SoC Timezone4
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone4"
    id: sunsynk_setting_soc_timezone4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 271
    unit_of_measurement: "%"
    value_type: U_WORD
    icon: "mdi:battery-clock-outline"

  - platform: modbus_controller          # 272 Settings SoC Timezone5
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone5"
    id: sunsynk_setting_soc_timezone5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 272
    unit_of_measurement: "%"
    value_type: U_WORD
    icon: "mdi:battery-clock-outline"

  - platform: modbus_controller          # 273 Settings SoC Timezone6
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone6"
    id: sunsynk_setting_soc_timezone6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 273
    unit_of_measurement: "%"
    value_type: U_WORD
    icon: "mdi:battery-clock-outline"

  - platform: modbus_controller          # 274 Settings Grid Charge Timezone1
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Grid Charge Timezone1"
    id: sunsynk_setting_grid_charge_timezone1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 274

  - platform: modbus_controller          # 275 Settings Grid Charge Timezone2
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Grid Charge Timezone2"
    id: sunsynk_setting_grid_charge_timezone2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 275
    
  - platform: modbus_controller          # 276 Settings Grid Charge Timezone3
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Grid Charge Timezone3"
    id: sunsynk_setting_grid_charge_timezone3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 276
    
  - platform: modbus_controller          # 277 Settings Grid Charge Timezone4
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Grid Charge Timezone4"
    id: sunsynk_setting_grid_charge_timezone4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 277
    
  - platform: modbus_controller          # 278 Settings Grid Charge Timezone5
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Grid Charge Timezone5"
    id: sunsynk_setting_grid_charge_timezone5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 278
    
  - platform: modbus_controller          # 279 Settings Grid Charge Timezone6
    modbus_controller_id: sunsynk
#    name: "${friendly_name} Setting Grid Charge Timezone6"
    id: sunsynk_setting_grid_charge_timezone6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 279

  - platform: modbus_controller          # 256 # Settings Power Timezone1
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone1"
    id: sunsynk_setting_power_timezone1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 256
    unit_of_measurement: "W"
    value_type: U_WORD
    icon: "mdi:flash"
    
  - platform: modbus_controller          # 257 # Settings Power Timezone2
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone2"
    id: sunsynk_setting_power_timezone2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 257
    unit_of_measurement: "W"
    value_type: U_WORD
    icon: "mdi:flash"
    
  - platform: modbus_controller          # 258 # Settings Power Timezone3
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone3"
    id: sunsynk_setting_power_timezone3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 258
    unit_of_measurement: "W"
    value_type: U_WORD
    icon: "mdi:flash"
    
  - platform: modbus_controller          # 259 # Settings Power Timezone4
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone4"
    id: sunsynk_setting_power_timezone4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 259
    unit_of_measurement: "W"
    value_type: U_WORD
    icon: "mdi:flash"
    
  - platform: modbus_controller          # 260 # Settings Power Timezone5
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone5"
    id: sunsynk_setting_power_timezone5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 260
    unit_of_measurement: "W"
    value_type: U_WORD
    icon: "mdi:flash"
    
  - platform: modbus_controller          # 261 # Settings Power Timezone6
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone6"
    id: sunsynk_setting_power_timezone6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 261
    unit_of_measurement: "W"
    value_type: U_WORD
    icon: "mdi:flash"

  - platform: modbus_controller        # 255 Grid Peak Shaving RAW register value for SELECT SENSORS below
    modbus_controller_id: sunsynk
    id: grid_peak_shaving_raw
    register_type: holding
    address: 280
    value_type: U_WORD


################################################ WRITE SETTINGS ################################################

switch:
  - platform: modbus_controller          # 247 Toggle Solar Sell
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Solar sell"
    id: sunsynk_toggle_solar_sell
    register_type: holding
    address: 247
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 248 Toggle System Timer
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} System Timer" 
    id: sunsynk_toggle_Time_of_Use
    register_type: holding
    address: 248
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 274 Toggle Grid Charge Timezone1
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Charge Timezone1"
    id: sunsynk_toggle_grid_charge_timezone1
    register_type: holding
    address: 274
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 275 Toggle Grid Charge Timezone2
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Grid Charge Timezone2"
    id: sunsynk_toggle_grid_charge_timezone2
    register_type: holding
    address: 275
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 276 Toggle Grid Charge Timezone3
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Grid Charge Timezone3"
    id: sunsynk_toggle_grid_charge_timezone3
    register_type: holding
    address: 276
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 277 Toggle Grid Charge Timezone4
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Grid Charge Timezone4"
    id: sunsynk_toggle_grid_charge_timezone4
    register_type: holding
    address: 277
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 278 Toggle Grid Charge Timezone5
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Grid Charge Timezone5"
    id: sunsynk_toggle_grid_charge_timezone5
    register_type: holding
    address: 278
    bitmask: 1
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 279 Toggle Grid Charge Timezone6
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Grid Charge Timezone6"
    id: sunsynk_toggle_grid_charge_timezone6
    register_type: holding
    address: 279
    bitmask: 1
    icon: "mdi:toggle-switch"

number:
  - platform: modbus_controller         # 268 Settings SoC Timezone1
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone1
    name: "${friendly_name} Set SoC Timezone1"
    unit_of_measurement: "%"
    address: 268
    min_value: 10
    max_value: 100
    step: 5
    value_type: U_WORD

  - platform: modbus_controller         # 269 Settings SoC Timezone2
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone2
    name: "${friendly_name} Set SoC Timezone2"
    unit_of_measurement: "%"
    address: 269
    min_value: 10
    max_value: 100
    step: 5
    value_type: U_WORD

  - platform: modbus_controller         # 270 Settings SoC Timezone3
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone3
    name: "${friendly_name} Set SoC Timezone3"
    unit_of_measurement: "%"
    address: 270
    min_value: 10
    max_value: 100
    step: 5
    value_type: U_WORD

  - platform: modbus_controller         # 271 Settings SoC Timezone4
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone4
    name: "${friendly_name} Set SoC Timezone4"
    unit_of_measurement: "%"
    address: 271
    min_value: 10
    max_value: 100
    step: 5
    value_type: U_WORD

  - platform: modbus_controller         # 272 Settings SoC Timezone5
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone5
    name: "${friendly_name} Set SoC Timezone5"
    unit_of_measurement: "%"
    address: 272
    min_value: 10
    max_value: 100
    step: 5
    value_type: U_WORD

  - platform: modbus_controller         # 273 Settings SoC Timezone6
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone6
    name: "${friendly_name} Set SoC Timezone6"
    unit_of_measurement: "%"
    address: 273
    min_value: 10
    max_value: 100
    step: 5
    value_type: U_WORD
    
  - platform: modbus_controller         # Set Power Timezone1
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone1
    name: "${friendly_name} Set Power Timezone1"
    unit_of_measurement: "W"
    address: 256
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD
    
  - platform: modbus_controller         # Set Power Timezone2
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone2
    name: "${friendly_name} Set Power Timezone2"
    unit_of_measurement: "W"
    address: 257
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD
 
  - platform: modbus_controller         # Set Power Timezone3
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone3
    name: "${friendly_name} Set Power Timezone3"
    unit_of_measurement: "W"
    address: 258
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD

  - platform: modbus_controller         # Set Power Timezone4
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone4
    name: "${friendly_name} Set Power Timezone4"
    unit_of_measurement: "W"
    address: 259
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD

  - platform: modbus_controller         # Set Power Timezone5
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone5
    name: "${friendly_name} Set Power Timezone5"
    unit_of_measurement: "W"
    address: 260
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD

  - platform: modbus_controller         # Set Power Timezone6
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone6
    name: "${friendly_name} Set Power Timezone6"
    unit_of_measurement: "W"
    address: 261
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD

  - platform: modbus_controller         # 230 Grid Charge Battery current
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_grid_charge_batt_current
    name: "${friendly_name} Grid Charge Battery current"
    unit_of_measurement: "A"
    address: 230
    min_value: 0
    max_value: 60                       #House Fuse 60A
    step: 5
    value_type: U_WORD
    entity_category: config

  - platform: modbus_controller         # 210 Battery Max Charge current
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_batt_max_charge_current
    name: "${friendly_name} Battery Max Charge current"
    unit_of_measurement: "A"
    address: 210
    min_value: 0
    max_value: 100                      # 2 x SunSynk IP65 L5.1 Batteries 100A Charge Limit
    step: 5
    value_type: U_WORD
    entity_category: config

  - platform: modbus_controller         # 211 Battery Max Discharge current
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_batt_max_discharge_current
    name: "${friendly_name} Battery Max Discharge current"
    unit_of_measurement: "A"
    address: 211
    min_value: 0
    max_value: 125                      # 2 x SunSynk IP65 L5.1 Batteries 100A Charge Limit
    step: 5
    value_type: U_WORD
    entity_category: config

  - platform: modbus_controller            # 293 Grid Peak Shaving Power
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Peak shaving power"
    id: sunsynk_grid_peak_shaving_power
    address: 293
    unit_of_measurement: "W"
    min_value: 0
    max_value: 8000
    step: 500
    value_type: U_WORD
    entity_category: config

  - platform: modbus_controller            # 245 Max Sell Power
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Max Sell power"
    id: sunsynk_max_sell_power
    address: 245
    unit_of_measurement: "W"
    min_value: 0
    max_value: 8000
    step: 500
    value_type: U_WORD
    entity_category: config
 

################################################ TEMPLATE SENSORS ################################################

text_sensor:
  - platform: modbus_controller            # 059 Overall State
    modbus_controller_id: sunsynk
    name: "${friendly_name} Overall State"
    id: sunsynk_overall_state
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    raw_encode: HEXBYTES
    address: 59
    lambda: |- 
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("standby");
        case 1: return std::string("selftest");
        case 2: return std::string("normal");
        case 3: return std::string("alarm");
        case 4: return std::string("fault");
        default: return std::string("unknown");
      }
 
  - platform: template                  # Settings Timezone1
    name: "${friendly_name} Time Slot 1"
    id: sunsynk_time_slot_1
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone1).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone1).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone1).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                  # Settings Timezone2
    name: "${friendly_name} Time Slot 2"
    id: sunsynk_time_slot_2
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone2).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone2).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone2).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                  # Settings Timezone3
    name: "${friendly_name} Time Slot 3"
    id: sunsynk_time_slot_3
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone3).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone3).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone3).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                  # Settings Timezone4
    name: "${friendly_name} Time Slot 4"
    id: sunsynk_time_slot_4
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone4).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone4).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone4).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                  # Settings Timezone5
    name: "${friendly_name} Time Slot 5"
    id: sunsynk_time_slot_5
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone5).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone5).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone5).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  - platform: template                  # Settings Timezone6
    name: "${friendly_name} Time Slot 6"
    id: sunsynk_time_slot_6
    icon: "mdi:clock"
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone6).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone6).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone6).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);



################################################ SELECT SENSORS ################################################


select:
  - platform: modbus_controller                   #243 Select Energy Patern
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Energy Pattern"
    id: sunsynk_select_energy_pattern
    address: 243
    value_type: U_WORD
    optionsmap:
      "Battery first": 0
      "Load first": 1   
         
  - platform: modbus_controller                   #244 Select Work Mode
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Work Mode"
    id: sunsynk_select_work_mode
    address: 244
    value_type: U_WORD
    optionsmap:
      "Selling First": 0
      "Zero Export + Limit to Load Only": 1
      "Limited to Home": 2    

  - platform: modbus_controller                  #280 Select Grid Peak Shaving
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Peak Shaving"
    id: sunsynk_esphome_select_grid_peak_shaving
    address: 280
    value_type: U_WORD
    optionsmap:
      "Disabled": 0
      "Enabled": 256
    lambda: |-
      // we are only interested in the 8th bit binary 0001 0000 0000 need to map the options 0, 256 in select 
      //ESP_LOGE("main","Modbus Number incoming value = %d",x);
      //ESP_LOGE("main","Modbus eval value = %d",(x & 0x0100));
      if ((x & 0x0100) == 0)
        return  std::string("Disabled");
      if ((x & 0x0100) == 256)
        return  std::string("Enabled");
      return {};
    write_lambda: |-
      //ESP_LOGE("main","Modbus write gets = %d",value);
      uint16_t unmodified =  id(grid_peak_shaving_raw).state;
      //ESP_LOGE("main","Modbus write unmodified = %d", unmodified);
      // optionsmap should only return 2 values... 0 , 256 so bitmask with complement 0x0100 to ensure we keep the original values in register. then appply or with the value that was chosen
      uint16_t modified = ((unmodified & ~0x0100) | value);
      //ESP_LOGE("main","Modbus write to write = %d", modified);
      return modified;
