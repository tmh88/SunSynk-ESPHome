# Substitutions
substitutions:
# Device Names
  device_name: "sunsynk"
  friendly_name: "SunSynk"
  device_description: "Sunsynk RS485 Logger"
  settings_skipped_updates: "4"

# Icon
  main_icon: "solar-power"
  
# Basic Config
esphome:
  name: "${device_name}"
  comment: '${device_description}'

esp32:
  board: lolin32_lite
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key
 
# OTA Updates Password 
ota:
  password: !secret sunsynk_ota_password

# Enable Webserver
web_server:
  port: 80
  auth:
    username: !secret web_server_username
    password: !secret web_server_password
  ota: true

# Wifi Setup
wifi:
  ssid: !secret Wifi_SSID
  password: !secret Wifi_Password

 # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Hotspot"
    password: !secret Fallback_Wifi_Password

  fast_connect: true
  power_save_mode: none

# Enable captive portal on fallback wifi 
captive_portal:

# Enable time component to reset energy at midnight
# https://esphome.io/components/time.html#home-assistant-time-source
time:
  - platform: homeassistant
    id: homeassistant_time
     
uart:
  id: mod_bus
  tx_pin: GPIO16
  rx_pin: GPIO17
  baud_rate: 9600
  stop_bits: 1
 
modbus:
  id: sunsynk_modbus
 
modbus_controller:
  - id: sunsynk
    address: 0x01
    modbus_id: sunsynk_modbus
    setup_priority: -10
    update_interval: "5s"
    command_throttle: "50ms"

############################################### BINARY SENSORS ###############################################
binary_sensor:           
  - platform: modbus_controller            # 194 Grid Connected Status
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Connected Status"
    id: sunsynk_grid_connected_status
    register_type: holding
    address: 194

############################################### SENSORS ###############################################
sensor:

##########
# General
##########
  - platform: modbus_controller            # 013 Firmware Control Board
    modbus_controller_id: sunsynk
    name: "${friendly_name} Firmware Control Board"
    id: sunsynk_firmware_control_board
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 13

  - platform: modbus_controller            # 014 Firmware Comms Board
    modbus_controller_id: sunsynk
    name: "${friendly_name} Firmware Comms Board"
    id: sunsynk_firmware_comms_board
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 14

  - platform: modbus_controller            # 090 DC Transformer Temperature
    modbus_controller_id: sunsynk
    name: "${friendly_name} DC Transformer Temperature"
    id: sunsynk_dctransformer_temperature
    register_type: holding
    address: 090
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: S_WORD
    filters:
      - offset: -1000
      - multiply:  0.1

  - platform: modbus_controller            # 091 DC Heatsink Temperature
    modbus_controller_id: sunsynk
    name: "${friendly_name} DC Heatsink Temperature"
    id: sunsynk_heatsink_temperature
    register_type: holding
    address: 091
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: S_WORD
    filters:
      - offset: -1000
      - multiply:  0.1

##########
# Battery
##########
  - platform: modbus_controller            # 182 Battery Temperature
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Temperature"
    id: sunsynk_battery_temperature
    register_type: holding
    address: 182
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    device_class: temperature
    state_class: measurement
    value_type: U_WORD 
    filters:
      - offset: -1000
      - multiply: 0.1

  - platform: modbus_controller            # 183 Battery Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Voltage"
    id: sunsynk_battery_voltage
    register_type: holding
    address: 183
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    filters:
      - multiply: 0.01
    value_type: U_WORD

  - platform: modbus_controller            # 184 Battery SOC
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery SOC"
    id: sunsynk_battery_soc
    register_type: holding
    address: 184
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery
    value_type: U_WORD

  - platform: modbus_controller            # 190 Battery Output Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Output Power"
    id: sunsynk_battery_output_power
    register_type: holding
    address: 190
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    value_type: S_WORD

  - platform: modbus_controller            # 191 Battery Output Current
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Output Current"
    id: sunsynk_battery_output_current
    register_type: holding
    address: 191
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 217 Battery Capacity Shutdown
    modbus_controller_id: sunsynk
    name: "${friendly_name} Battery Capacity Shutdown"
    id: sunsynk_battery_capacity_shutdown
    register_type: holding
    address: 217
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: battery

###########
# Inverter
###########
  - platform: modbus_controller            # 175 Inverter Output Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Inverter Output Power"
    id: sunsynk_inverter_output_power
    register_type: holding
    address: 175
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    value_type: S_WORD

  - platform: modbus_controller            # 154 Inverter Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} Inverter Voltage"
    id: sunsynk_inverter_voltage
    register_type: holding
    address: 154
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 164 Inverter Output Current
    modbus_controller_id: sunsynk
    name: "${friendly_name} Inverter Output Current"
    id: sunsynk_inverter_output_current
    register_type: holding
    address: 164
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: S_WORD
    filters:
      - multiply: 0.01

  - platform: modbus_controller            # 193 Grid Frequency
    modbus_controller_id: sunsynk
    name: "${friendly_name} Inverter Frequency"
    id: sunsynk_inverter_frequency
    register_type: holding
    address: 193
    unit_of_measurement: "Hz"
    accuracy_decimals: 2
    state_class: measurement   
    value_type: U_WORD    
    filters:
      - multiply: 0.01

#######
# Grid
#######
  - platform: modbus_controller            # 079 Grid Frequency
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Frequency"
    id: sunsynk_grid_frequency
    register_type: holding
    address: 79
    unit_of_measurement: "Hz"
    accuracy_decimals: 2
    state_class: measurement   
    value_type: U_WORD    
    filters:
      - multiply: 0.01

  - platform: modbus_controller             # 169 Grid Power = L1(167) + L2(168)
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Power"
    id: sunsynk_grid_power
    register_type: holding
    address: 169
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD
    #filters: #GOOD
    #  - lambda: |-
    #          float MIN_VALUE = -10000.0;
    #          float MAX_VALUE = 10000.0;
    #          if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
    #          else return {};

  - platform: modbus_controller             # 167 Grid LD Power = L1 seems to be LD
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid LD Power"
    id: sunsynk_grid_ld_power
    register_type: holding
    address: 167
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD
    #filters: #GOOD
    #  - lambda: |-
    #          float MIN_VALUE = -10000.0;
    #          float MAX_VALUE = 10000.0;
    #          if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
    #          else return {};

  - platform: modbus_controller             # 168 Grid L2 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid L2 Power"
    id: sunsynk_grid_l2_power
    register_type: holding
    address: 168
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD
    #filters: #GOOD
    #  - lambda: |-
    #          float MIN_VALUE = -10000.0;
    #          float MAX_VALUE = 10000.0;
    #          if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
    #          else return {};

  - platform: modbus_controller            # 150 Grid Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Voltage"
    id: sunsynk_grid_voltage
    register_type: holding
    address: 150
    unit_of_measurement: "V"
    accuracy_decimals: 1
    device_class: voltage
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            #160 and 161 Grid Current signed 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid Current"
    id: sunsynk_grid_current
    register_type: holding
    address: 160
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
     - multiply: 0.01

  - platform: modbus_controller            # 172 Grid CT Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Grid CT Power"
    id: sunsynk_grid_ct_power
    register_type: holding
    address: 172
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD
    #filters: #GOOD
    #  - lambda: |-
    #          float MIN_VALUE = -10000.0;
    #          float MAX_VALUE = 10000.0;
    #          if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
    #          else return {};

#######
# Load
#######
  - platform: modbus_controller            # 178 Load Power = L1(176) + L2(177)
    modbus_controller_id: sunsynk
    name: "${friendly_name} Load Power"
    id: sunsynk_load_power
    register_type: holding
    address: 178
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 176 Load L1 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Load L1 Power"
    id: sunsynk_load_l1_power
    register_type: holding
    address: 176
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 177 Load L2 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Load L2 Power"
    id: sunsynk_load_l2_power
    register_type: holding
    address: 177
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: modbus_controller            # 192 Load Frequency
    modbus_controller_id: sunsynk
    name: "${friendly_name} Load Frequency"
    id: sunsynk_load_frequency
    register_type: holding
    address: 192
    unit_of_measurement: "Hz"
    accuracy_decimals: 2
    state_class: measurement    
    value_type: U_WORD    
    filters:
      - multiply: 0.01

#############
# Solar PV
#############
  - platform: modbus_controller            # 186 PV1 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} PV1 Power"
    id: sunsynk_pv1_power
    register_type: holding
    address: 186
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: U_WORD

  - platform: modbus_controller            # 109 DC1 Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} DC1 Voltage"
    id: sunsynk_dc1_voltage
    register_type: holding
    address: 109
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 110 DC1 Output Current
    modbus_controller_id: sunsynk
    name: "${friendly_name} DC1 Current"
    id: sunsynk_dc1_current
    register_type: holding
    address: 110
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1
   
  - platform: modbus_controller            # 187 PV2 Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} PV2 Power"
    id: sunsynk_pv2_power
    register_type: holding
    address: 187
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: U_WORD

  - platform: modbus_controller            # 111 DC2 Voltage
    modbus_controller_id: sunsynk
    name: "${friendly_name} DC2 Voltage"
    id: sunsynk_dc2_voltage
    register_type: holding
    address: 111
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 112 DC2 Output Current
    modbus_controller_id: sunsynk
    name: "${friendly_name} DC2 Current"
    id: sunsynk_dc2_current
    register_type: holding
    address: 112
    unit_of_measurement: "A"
    accuracy_decimals: 1
    device_class: current
    state_class: measurement
    value_type: U_WORD    
    filters:
      - multiply: 0.1


  - platform: template                   # Sum of PV1 and PV2 to get total PV Power
    name: "${friendly_name} Total Solar"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_pv1_power).state + id(sunsynk_pv2_power).state);
    #update_interval: 5s


###################
# Power on Outputs
###################
  - platform: modbus_controller            # 166 Aux Output Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Aux Output Power"
    id: sunsynk_aux_output_power
    register_type: holding
    address: 166
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    value_type: S_WORD

  - platform: template                     # Essential Power based on register 175 + 169 - 166
    name: "${friendly_name} Essential Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_inverter_output_power).state + id(sunsynk_grid_power).state - id(sunsynk_aux_output_power).state);
    #update_interval: 5s

  - platform: template                     # UPS Power (Essential 1 Power) based on register 175 + 167 - 166
    name: "${friendly_name} UPS Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_inverter_output_power).state + id(sunsynk_grid_ld_power).state - id(sunsynk_aux_output_power).state);
    #update_interval: 5s

  - platform: template                     # Essential 2 Power) based on register 175 + 169 - 166
    name: "${friendly_name} Essential 2 Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_inverter_output_power).state + id(sunsynk_grid_power).state - id(sunsynk_aux_output_power).state);
    #update_interval: 5s

  - platform: template                     # Nonessential Power(House Load) 172 - 167
    name: "${friendly_name} House Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_grid_ct_power).state - id(sunsynk_grid_ld_power).state);
    #update_interval: 5s

  - platform: template                     # Nonessential Power 175 - 167
    name: "${friendly_name} Non-Essential Power"
    unit_of_measurement: "W"
    accuracy_decimals: 0
    device_class: power
    state_class: measurement
    lambda: |-
      return (id(sunsynk_inverter_output_power).state - id(sunsynk_grid_ld_power).state);
    #update_interval: 5s

#########
# Energy
#########
  - platform: modbus_controller            # 070 Daily Battery Charge
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Battery Charge"
    id: sunsynk_battery_charge_day
    register_type: holding
    address: 70
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 071 Daily Battery Discharge
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Battery Discharge"
    id: sunsynk_battery_discharge_day
    register_type: holding
    address: 71
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 076 Daily Grid Import
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Grid Import"
    id: sunsynk_grid_import_day
    register_type: holding
    address: 76
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 077 Daily Grid Export
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Grid Export"
    id: sunsynk_grid_export_day
    register_type: holding
    address: 77
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 084 Daily Load
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily Load Power (kWh)"
    id: sunsynk_daily_load_power_kwh
    register_type: holding
    address: 84
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 108 Daily PV Power
    modbus_controller_id: sunsynk
    name: "${friendly_name} Daily PV Power (kWh)"
    id: sunsynk_daily_pv_power_kwh
    register_type: holding
    address: 108
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD    
    filters:
      - multiply: 0.1

  - platform: modbus_controller            #72 and 73 Total Battery Charge unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Battery Charge (kWh)"
    id: sunsynk_total_battery_charge_kwh
    register_type: holding
    address: 72
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
     - multiply: 0.1

  - platform: modbus_controller            #74 and 75 Total Battery Discharge unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Battery Discharge (kWh)"
    id: sunsynk_total_battery_discharge_kwh
    register_type: holding
    address: 74
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
     - multiply: 0.1

  - platform: modbus_controller            # 78 and 80 Total Grid Import unsigned 32 bit integer from 2 registers low word first????? Using 78 only an unsure how to use 2 diffrent registers!
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Grid Import (kWh)"
    id: sunsynk_total_grid_import_kwh
    register_type: holding
    address: 78
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_WORD
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 81 and 82 Total Grid Export unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Grid Export (kWh)"
    id: sunsynk_total_grid_export_kwh
    register_type: holding
    address: 81
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 85 and 86 Load Power Total unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total Load Power (kWh)"
    id: sunsynk_total_load_power_kwh
    register_type: holding
    address: 85
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R
    filters:
      - multiply: 0.1

  - platform: modbus_controller            # 96 and 97 Total PV Power unsigned 32 bit integer from 2 registers low word first
    modbus_controller_id: sunsynk
    name: "${friendly_name} Total PV Power (kWh)"
    id: sunsynk_total_pv_power_kwh
    register_type: holding
    address: 96
    unit_of_measurement: "kWh"
    accuracy_decimals: 2
    device_class: energy
    state_class: total_increasing
    value_type: U_DWORD_R    
    filters:
      - multiply: 0.1


################################################ READ SETTINGS ################################################
  - platform: modbus_controller          # 250 Settings Timezone1
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Timezone1"
    id: sunsynk_setting_timezone1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 250
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 251 Settings Timezone2
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Timezone2"
    id: sunsynk_setting_timezone2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 251   
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 252 Settings Timezone3
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Timezone3"
    id: sunsynk_setting_timezone3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 252
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 253 Settings Timezone4
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Timezone4"
    id: sunsynk_setting_timezone4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 253
    icon: "mdi:clock"

  - platform: modbus_controller          # 254 Settings Timezone5
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Timezone5"
    id: sunsynk_setting_timezone5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 254
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"

  - platform: modbus_controller          # 255 Settings Timezone6
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Timezone6"
    id: sunsynk_setting_timezone6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 255
    filters: #GOOD
      - lambda: |-
            if (x > 32767) return (x - 65535) /1;
            else return (x) /1;
    icon: "mdi:clock"


  - platform: modbus_controller          # 268 Settings SoC Timezone1
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone1"
    id: sunsynk_setting_soc_timezone1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 268
    unit_of_measurement: "%"
    value_type: U_WORD

  - platform: modbus_controller          # 269 Settings SoC Timezone2
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone2"
    id: sunsynk_setting_soc_timezone2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 269
    unit_of_measurement: "%"
    value_type: U_WORD

  - platform: modbus_controller          # 270 Settings SoC Timezone3
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone3"
    id: sunsynk_setting_soc_timezone3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 270
    unit_of_measurement: "%"
    value_type: U_WORD

  - platform: modbus_controller          # 271 Settings SoC Timezone4
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone4"
    id: sunsynk_setting_soc_timezone4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 271
    unit_of_measurement: "%"
    value_type: U_WORD

  - platform: modbus_controller          # 272 Settings SoC Timezone5
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone5"
    id: sunsynk_setting_soc_timezone5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 272
    unit_of_measurement: "%"
    value_type: U_WORD

  - platform: modbus_controller          # 273 Settings SoC Timezone6
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting SoC Timezone6"
    id: sunsynk_setting_soc_timezone6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 273
    unit_of_measurement: "%"
    value_type: U_WORD

  - platform: modbus_controller          # 274 Settings Grid Charge Timezone1
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Grid Charge Timezone1"
    id: sunsynk_setting_grid_charge_timezone1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 274

  - platform: modbus_controller          # 275 Settings Grid Charge Timezone2
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Grid Charge Timezone2"
    id: sunsynk_setting_grid_charge_timezone2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 275
    
  - platform: modbus_controller          # 276 Settings Grid Charge Timezone3
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Grid Charge Timezone3"
    id: sunsynk_setting_grid_charge_timezone3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 276
    
  - platform: modbus_controller          # 277 Settings Grid Charge Timezone4
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Grid Charge Timezone4"
    id: sunsynk_setting_grid_charge_timezone4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 277
    
  - platform: modbus_controller          # 278 Settings Grid Charge Timezone5
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Grid Charge Timezone5"
    id: sunsynk_setting_grid_charge_timezone5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 278
    
  - platform: modbus_controller          # 279 Settings Grid Charge Timezone6
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Grid Charge Timezone6"
    id: sunsynk_setting_grid_charge_timezone6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 279

  - platform: modbus_controller          # 256 # Settings Power Timezone1
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone1"
    id: sunsynk_setting_power_timezone1
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 256
    unit_of_measurement: "W"
    value_type: U_WORD
    
  - platform: modbus_controller          # 257 # Settings Power Timezone2
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone2"
    id: sunsynk_setting_power_timezone2
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 257
    unit_of_measurement: "W"
    value_type: U_WORD
    
  - platform: modbus_controller          # 258 # Settings Power Timezone3
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone3"
    id: sunsynk_setting_power_timezone3
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 258
    unit_of_measurement: "W"
    value_type: U_WORD
    
  - platform: modbus_controller          # 259 # Settings Power Timezone4
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone4"
    id: sunsynk_setting_power_timezone4
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 259
    unit_of_measurement: "W"
    value_type: U_WORD
    
  - platform: modbus_controller          # 260 # Settings Power Timezone5
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone5"
    id: sunsynk_setting_power_timezone5
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 260
    unit_of_measurement: "W"
    value_type: U_WORD
    
  - platform: modbus_controller          # 261 # Settings Power Timezone6
    modbus_controller_id: sunsynk
    name: "${friendly_name} Setting Power Timezone6"
    id: sunsynk_setting_power_timezone6
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    address: 261
    unit_of_measurement: "W"
    value_type: U_WORD

################################################ WRITE SETTINGS ################################################

switch:
  - platform: modbus_controller          # 247 Toggle Solar Sell
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Toggle Solar sell"
    id: sunsynk_toggle_solar_sell
    register_type: holding
    address: 247
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 248 Toggle System Timer
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Toggle System Timer" 
    id: sunsynk_toggle_Time_of_Use
    register_type: holding
    address: 248
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 243 Priority Load
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Toggle Priority Load" 
    id: sunsynk_toggle_priority_load
    register_type: holding
    address: 243
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 274 Toggle Grid Charge Timezone1
    use_write_multiple: true
    modbus_controller_id: sunsynk
    name: "${friendly_name} Toggle Grid Charge Timezone1"
    id: sunsynk_toggle_grid_charge_timezone1
    register_type: holding
    address: 274
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 275 Toggle Grid Charge Timezone2
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Toggle Grid Charge Timezone2"
    id: sunsynk_toggle_grid_charge_timezone2
    register_type: holding
    address: 275
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 276 Toggle Grid Charge Timezone3
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Toggle Grid Charge Timezone3"
    id: sunsynk_toggle_grid_charge_timezone3
    register_type: holding
    address: 276
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 277 Toggle Grid Charge Timezone4
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Toggle Grid Charge Timezone4"
    id: sunsynk_toggle_grid_charge_timezone4
    register_type: holding
    address: 277
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 278 Toggle Grid Charge Timezone5
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Toggle Grid Charge Timezone5"
    id: sunsynk_toggle_grid_charge_timezone5
    register_type: holding
    address: 278
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

  - platform: modbus_controller          # 279 Toggle Grid Charge Timezone6
    modbus_controller_id: sunsynk
    use_write_multiple: true
    name: "${friendly_name} Toggle Grid Charge Timezone6"
    id: sunsynk_toggle_grid_charge_timezone6
    register_type: holding
    address: 279
    bitmask: 1
    entity_category: config
    icon: "mdi:toggle-switch"

number:
  - platform: modbus_controller         # 268 Settings SoC Timezone1
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone1
    name: "${friendly_name} Set SoC Timezone1"
    unit_of_measurement: "%"
    address: 268
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 269 Settings SoC Timezone2
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone2
    name: "${friendly_name} Set SoC Timezone2"
    unit_of_measurement: "%"
    address: 269
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 270 Settings SoC Timezone3
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone3
    name: "${friendly_name} Set SoC Timezone3"
    unit_of_measurement: "%"
    address: 270
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 271 Settings SoC Timezone4
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone4
    name: "${friendly_name} Set SoC Timezone4"
    unit_of_measurement: "%"
    address: 271
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 272 Settings SoC Timezone5
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone5
    name: "${friendly_name} Set SoC Timezone5"
    unit_of_measurement: "%"
    address: 272
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD  

  - platform: modbus_controller         # 273 Settings SoC Timezone6
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_soc_timezone6
    name: "${friendly_name} Set SoC Timezone6"
    unit_of_measurement: "%"
    address: 273
    min_value: 0
    max_value: 100
    step: 5
    value_type: U_WORD
    
  - platform: modbus_controller         # Set Power Timezone1
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone1
    name: "${friendly_name} Set Power Timezone1"
    unit_of_measurement: "W"
    address: 256
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD
    
  - platform: modbus_controller         # Set Power Timezone2
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone2
    name: "${friendly_name} Set Power Timezone2"
    unit_of_measurement: "W"
    address: 257
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD
 
  - platform: modbus_controller         # Set Power Timezone3
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone3
    name: "${friendly_name} Set Power Timezone3"
    unit_of_measurement: "W"
    address: 258
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD

  - platform: modbus_controller         # Set Power Timezone4
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone4
    name: "${friendly_name} Set Power Timezone4"
    unit_of_measurement: "W"
    address: 259
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD

  - platform: modbus_controller         # Set Power Timezone5
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone5
    name: "${friendly_name} Set Power Timezone5"
    unit_of_measurement: "W"
    address: 260
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD

  - platform: modbus_controller         # Set Power Timezone6
    use_write_multiple: true
    modbus_controller_id: sunsynk
    id: sunsynk_set_power_timezone6
    name: "${friendly_name} Set Power Timezone6"
    unit_of_measurement: "W"
    address: 261
    min_value: 0
    max_value: 8000
    step: 50
    value_type: U_WORD

 
    

################################################ TEMPLATE SENSORS ################################################

text_sensor:
  - platform: modbus_controller            # 059 Overall State
    modbus_controller_id: sunsynk
    name: "${friendly_name} Overall State"
    id: sunsynk_overall_state
    register_type: holding
    skip_updates: ${settings_skipped_updates}
    raw_encode: HEXBYTES
    address: 59
    lambda: |- 
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("standby");
        case 1: return std::string("selftest");
        case 2: return std::string("normal");
        case 3: return std::string("alarm");
        case 4: return std::string("fault");
        default: return std::string("unknown");
      }
  - platform: template
    name: "${friendly_name} Time Slot 1"
    id: sunsynk_time_slot_1
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone1).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone1).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone1).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);
  - platform: template
    name: "${friendly_name} Time Slot 2"
    id: sunsynk_time_slot_2
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone2).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone2).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone2).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);
  - platform: template
    name: "${friendly_name} Time Slot 3"
    id: sunsynk_time_slot_3
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone3).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone3).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone3).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);
  - platform: template
    name: "${friendly_name} Time Slot 4"
    id: sunsynk_time_slot_4
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone4).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone4).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone4).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);
  - platform: template
    name: "${friendly_name} Time Slot 5"
    id: sunsynk_time_slot_5
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone5).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone5).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone5).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);
  - platform: template
    name: "${friendly_name} Time Slot 6"
    id: sunsynk_time_slot_6
    lambda: |-
        int minutes, hours;
        if (id(sunsynk_setting_timezone6).state) {
        minutes = static_cast<int>(id(sunsynk_setting_timezone6).state) % 100;
        hours = static_cast<int>(id(sunsynk_setting_timezone6).state) / 100;
        } else {
          minutes = 0;
          hours = 0;
        }
        char formatted_time[6];
        snprintf(formatted_time, sizeof(formatted_time), "%02d:%02d", hours, minutes);
        return esphome::optional<std::string>(formatted_time);

  # - platform: template
  #   name: "${friendly_name} Battery Capacity"
  #   id: sunsynk_battery_capacity
  #   lambda: |-
  #     if (!id(grid_connected_status).state) {
  #       float value = id(sunsynk_battery_capacity_shutdown).state;
  #       char buffer[10];
  #       dtostrf(value, 6, 0, buffer);
  #       return std::string(buffer);
  #     } else {
               
  #       // Get the current date and time
  #       time_t now = id(homeassistant_time).now().timestamp;
  #       tm* currentTime = localtime(&now);

  #       std::string timeSlot1 = id(sunsynk_time_slot_1).state;
  #       std::string timeSlot2 = id(sunsynk_time_slot_2).state;
  #       std::string timeSlot3 = id(sunsynk_time_slot_3).state;
  #       std::string timeSlot4 = id(sunsynk_time_slot_4).state;
  #       std::string timeSlot5 = id(sunsynk_time_slot_5).state;
  #       std::string timeSlot6 = id(sunsynk_time_slot_6).state;

  #       int hour, minute;

  #       // Convert timeSlot1 to sellTime1Epoch
  #       sscanf(timeSlot1.c_str(), "%d:%d", &hour, &minute);
  #       currentTime->tm_hour = hour;
  #       currentTime->tm_min = minute;
  #       currentTime->tm_sec = 0;
  #       time_t sellTime1Epoch = mktime(currentTime);
  #       // ESP_LOGD("DEBUG", "sellTime1Epoch: %ld, now: %ld", sellTime1Epoch, now);

  #       // Convert timeSlot2 to sellTime2Epoch
  #       sscanf(timeSlot2.c_str(), "%d:%d", &hour, &minute);
  #       currentTime->tm_hour = hour;
  #       currentTime->tm_min = minute;
  #       currentTime->tm_sec = 0;
  #       time_t sellTime2Epoch = mktime(currentTime);

  #       // Convert timeSlot3 to sellTime3Epoch
  #       sscanf(timeSlot3.c_str(), "%d:%d", &hour, &minute);
  #       currentTime->tm_hour = hour;
  #       currentTime->tm_min = minute;
  #       currentTime->tm_sec = 0;
  #       time_t sellTime3Epoch = mktime(currentTime);

  #       // Convert timeSlot4 to sellTime4Epoch
  #       sscanf(timeSlot4.c_str(), "%d:%d", &hour, &minute);
  #       currentTime->tm_hour = hour;
  #       currentTime->tm_min = minute;
  #       currentTime->tm_sec = 0;
  #       time_t sellTime4Epoch = mktime(currentTime);

  #       // Convert timeSlot5 to sellTime5Epoch
  #       sscanf(timeSlot5.c_str(), "%d:%d", &hour, &minute);
  #       currentTime->tm_hour = hour;
  #       currentTime->tm_min = minute;
  #       currentTime->tm_sec = 0;
  #       time_t sellTime5Epoch = mktime(currentTime);

  #       // Convert timeSlot6 to sellTime6Epoch
  #       sscanf(timeSlot6.c_str(), "%d:%d", &hour, &minute);
  #       currentTime->tm_hour = hour;
  #       currentTime->tm_min = minute;
  #       currentTime->tm_sec = 0;
  #       time_t sellTime6Epoch = mktime(currentTime);

  #       if (now >= sellTime1Epoch && now < sellTime2Epoch)  {
  #         float value = static_cast<float>(id(sunsynk_set_soc_timezone1).state);
  #         char buffer[10];
  #         dtostrf(value, 6, 0, buffer);
  #         return std::string(buffer);
  #       } else if (now >= sellTime2Epoch && now < sellTime3Epoch) {
  #         float value = static_cast<float>(id(sunsynk_set_soc_timezone2).state);
  #         char buffer[10];
  #         dtostrf(value, 6, 0, buffer);
  #         return std::string(buffer);
  #       } else if (now >= sellTime3Epoch && now < sellTime4Epoch) {
  #         float value = static_cast<float>(id(sunsynk_set_soc_timezone3).state);
  #         char buffer[10];
  #         dtostrf(value, 6, 0, buffer);
  #         return std::string(buffer);
  #       } else if (now >= sellTime4Epoch && now < sellTime5Epoch) {
  #         float value = static_cast<float>(id(sunsynk_set_soc_timezone4).state);
  #         char buffer[10];
  #         dtostrf(value, 6, 0, buffer);
  #         return std::string(buffer);
  #       } else if (now >= sellTime5Epoch && now < sellTime6Epoch) {
  #         float value = static_cast<float>(id(sunsynk_set_soc_timezone5).state);
  #         char buffer[10];
  #         dtostrf(value, 6, 0, buffer);
  #         return std::string(buffer);
  #       } else if (now >= sellTime6Epoch && now < sellTime1Epoch) {
  #         float value = static_cast<float>(id(sunsynk_set_soc_timezone6).state);
  #         char buffer[10];
  #         dtostrf(value, 6, 0, buffer);
  #         return std::string(buffer);
  #       } else {
  #         float value = id(sunsynk_battery_capacity_shutdown).state;
  #         char buffer[10];
  #         dtostrf(value, 6, 0, buffer);
  #         return std::string(buffer);
  #         }
  #     }

  # - platform: template
  #   name: "${friendly_name} Battery Duration"
  #   lambda: |-
  #     int totalSeconds = 0;
  #     float battery_power = id(sunsynk_battery_output_power).state;
  #     float battery_capacity = atof(id(sunsynk_battery_capacity)->state.c_str());
  #     float battery_energy = 15960;
  #     float stateObj12_state = id(sunsynk_battery_soc)->state;
  #     float shutdown_soc = id(sunsynk_battery_capacity_shutdown)->state;
  #     bool stateObj20_state = id(grid_connected_status).state;

  #     if (stateObj20_state == false) {
  #       battery_capacity = shutdown_soc;
  #     } else if (battery_power > 0) {
  #       if (stateObj12_state <= battery_capacity) {
  #         battery_capacity = shutdown_soc;
  #       } else {
  #         battery_capacity = battery_capacity;
  #       }
  #     } else if (battery_power < 0) {
  #       if (stateObj20_state == false || stateObj12_state >= battery_capacity) {
  #         battery_capacity = 100;
  #       } else if (stateObj12_state < battery_capacity) {
  #         battery_capacity = battery_capacity;
  #       }
  #     }

  #     ESP_LOGD("sunsynk", "battery_power: %f", battery_power);
  #     ESP_LOGD("sunsynk", "battery_capacity: %f", battery_capacity);
  #     ESP_LOGD("sunsynk", "battery_energy: %f", battery_energy);
  #     ESP_LOGD("sunsynk", "stateObj12_state: %f", stateObj12_state);
  #     ESP_LOGD("sunsynk", "shutdown_soc: %f", shutdown_soc);
  #     ESP_LOGD("sunsynk", "stateObj20_state: %d", stateObj20_state);

  #     if (battery_power == 0) {
  #       totalSeconds = (((stateObj12_state - shutdown_soc) / 100) * battery_energy) / (1 * 60 * 60);
  #     } else if (battery_power > 0) {
  #       totalSeconds = ((((stateObj12_state - battery_capacity) / 100) * battery_energy) / battery_power) * 60 * 60;
  #     } else if (battery_power < 0) {
  #       totalSeconds = ((((battery_capacity - stateObj12_state) / 100) * battery_energy) / -battery_power) * 60 * 60;
  #     }

  #     ESP_LOGD("sunsynk", "totalSeconds: %d", totalSeconds);

  #     uint32_t durationMilliseconds = totalSeconds * 1000;
  #     uint32_t currentTime = millis();
  #     uint32_t resultTime = currentTime + durationMilliseconds;
  #     uint32_t resultHours = (resultTime / (60 * 60 * 1000)) % 24;
  #     uint32_t resultMinutes = (resultTime / (60 * 1000)) % 60;
  #     char formattedResultTime[6];
  #     snprintf(formattedResultTime, sizeof(formattedResultTime), "%02d:%02d", resultHours, resultMinutes);

  #     int days = totalSeconds / (60 * 60 * 24);
  #     int hours = (totalSeconds % (60 * 60 * 24)) / (60 * 60);
  #     int minutes = (totalSeconds % (60 * 60)) / 60;
  #     char duration[20] = "";
  #     if (days > 0) {
  #       snprintf(duration, sizeof(duration), "%d days, ", days);
  #     }
  #     if (hours > 0 || days > 0) {
  #       snprintf(duration + strlen(duration), sizeof(duration) - strlen(duration), "%d hrs, ", hours);
  #     }
  #     snprintf(duration + strlen(duration), sizeof(duration) - strlen(duration), "%d min", minutes);

  #     return std::string(duration);
